package ecobill.module.base.ui.businesspartner;

import ecobill.module.base.service.BaseService;
import ecobill.module.base.domain.SystemCountry;
import ecobill.module.base.domain.SystemUnit;
import ecobill.module.base.domain.SystemCounty;
import ecobill.core.system.Constants;
import ecobill.core.system.WorkArea;
import ecobill.core.util.ComboBoxUtils;

import javax.swing.*;
import javax.swing.border.TitledBorder;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.List;
import java.util.Collections;
import java.util.Set;
import java.util.ArrayList;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;

/**
 * @author Roman Georg Rädle
 */
public class Input extends JPanel {

    /**
     * In diesem <code>Log</code> können Fehler, Info oder sonstige Ausgaben erfolgen.
     * Diese Ausgaben können in einem separaten File spezifiziert werden.
     */
    protected final Log LOG = LogFactory.getLog(getClass());

    /**
     * Der <code>BaseService</code> ist die Business Logik. Unter anderem können hierdurch Daten
     * aus der Datenbank ausgelesen und gespeichert werden.
     */
    private BaseService baseService;

    /**
     * Gibt den <code>BaseService</code> und somit die Business Logik zurück.
     *
     * @return Der <code>BaseService</code>.
     */
    public BaseService getBaseService() {
        return baseService;
    }

    /**
     * Setzt den <code>BaseService</code> der die komplette Business Logik enthält
     * um bspw Daten aus der Datenbank zu laden und dorthin auch wieder abzulegen.
     *
     * @param baseService Der <code>BaseService</code>.
     */
    public void setBaseService(BaseService baseService) {
        this.baseService = baseService;
    }

    private JLabel titleL;
    private ComboBoxModel titleModel;
    private JComboBox title;

    private JLabel academicTitleL;
    private ComboBoxModel academicTitleModel;
    private JComboBox academicTitle;

    private JLabel zipCodeL;
    private JTextField zipCode;

    private JLabel countryL;
    private ComboBoxModel countryModel;
    private JComboBox country;

    private JLabel countyL;
    private ComboBoxModel countyModel;
    private JComboBox county;


    private JTextField city;
    private JLabel cityL;
    private JTextField customerNumber;
    private JLabel customerNumberL;
    private JTextField firstname;
    private JLabel firstnameL;
    private JTextField lastname;
    private JLabel lastnameL;
    private JTextField street;
    private JLabel streetL;

    private TitledBorder border = BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), WorkArea.getMessage(Constants.DATA), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0));

    /**
     * Creates new form Input
     */
    public Input(BaseService baseService) {

        this.baseService = baseService;

        initComponents();

        titleModel = new DefaultComboBoxModel(ComboBoxUtils.createNullLeadingItems(baseService.getSystemUnitsByCategory(Constants.SYSTEM_UNIT_TITLE)));
        title.setModel(titleModel);

        academicTitleModel = new DefaultComboBoxModel(ComboBoxUtils.createNullLeadingItems(baseService.getSystemUnitsByCategory(Constants.SYSTEM_UNIT_ACADEMIC_TITLE)));
        academicTitle.setModel(academicTitleModel);

        countryModel = new DefaultComboBoxModel(ComboBoxUtils.createNullLeadingItems(baseService.loadAll(SystemCountry.class)));
        country.setModel(countryModel);

        if (countryModel.getSelectedItem() != null) {

            Set counties = ((SystemCountry) countryModel.getSelectedItem()).getSystemCounties();

            List countiesList = new ArrayList(counties);

            Collections.sort(countiesList);

            countiesList.add(0, null);

            countyModel = new DefaultComboBoxModel(countiesList.toArray());
            county.setModel(countyModel);
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {

        setBorder(border);

        customerNumberL = new javax.swing.JLabel();
        customerNumber = new javax.swing.JTextField();
        titleL = new javax.swing.JLabel();
        title = new javax.swing.JComboBox();
        academicTitleL = new javax.swing.JLabel();
        academicTitle = new javax.swing.JComboBox();
        firstnameL = new javax.swing.JLabel();
        firstname = new javax.swing.JTextField();
        lastnameL = new javax.swing.JLabel();
        lastname = new javax.swing.JTextField();
        streetL = new javax.swing.JLabel();
        street = new javax.swing.JTextField();
        zipCodeL = new javax.swing.JLabel();
        zipCode = new JTextField();
        cityL = new javax.swing.JLabel();
        city = new javax.swing.JTextField();
        countryL = new javax.swing.JLabel();
        country = new javax.swing.JComboBox();
        countyL = new javax.swing.JLabel();
        county = new javax.swing.JComboBox();

        country.addItemListener(new ItemListener() {

            public void itemStateChanged(ItemEvent e) {

                System.out.println("#################");

                if (countryModel.getSelectedItem() != null) {

                    System.out.println("MODEL: " + ((SystemCountry) countryModel.getSelectedItem()).getSystemCounties());

                    SystemCountry systemCountry = (SystemCountry) countryModel.getSelectedItem();

                    Set counties = ((SystemCountry) countryModel.getSelectedItem()).getSystemCounties();

                    List countiesList = new ArrayList(counties);

                    Collections.sort(countiesList);

                    countiesList.add(0, null);

                    countyModel = new DefaultComboBoxModel(countiesList.toArray());
                    county.setModel(countyModel);
                }
            }
        });


        title.setMinimumSize(new java.awt.Dimension(80, 20));
        title.setPreferredSize(new java.awt.Dimension(80, 20));
        title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleActionPerformed(evt);
            }
        });

        academicTitle.setMinimumSize(new java.awt.Dimension(80, 20));
        academicTitle.setPreferredSize(new java.awt.Dimension(80, 20));

        firstname.setMinimumSize(new java.awt.Dimension(120, 20));
        firstname.setPreferredSize(new java.awt.Dimension(120, 20));

        lastname.setMinimumSize(new java.awt.Dimension(120, 20));
        lastname.setPreferredSize(new java.awt.Dimension(120, 20));

        street.setMinimumSize(new java.awt.Dimension(120, 20));
        street.setPreferredSize(new java.awt.Dimension(120, 20));

        zipCode.setMinimumSize(new java.awt.Dimension(80, 20));
        zipCode.setPreferredSize(new java.awt.Dimension(80, 20));

        city.setMinimumSize(new java.awt.Dimension(120, 20));
        city.setPreferredSize(new java.awt.Dimension(120, 20));

        country.setMinimumSize(new java.awt.Dimension(120, 20));
        country.setPreferredSize(new java.awt.Dimension(120, 20));

        county.setMinimumSize(new java.awt.Dimension(120, 20));
        county.setPreferredSize(new java.awt.Dimension(120, 20));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(customerNumber, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                                .add(customerNumberL)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(titleL)
                                                .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(academicTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(academicTitleL)))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(firstname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                                .add(firstnameL))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(lastnameL)
                                        .add(lastname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)))
                                .add(streetL)
                                .add(street, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(zipCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(zipCodeL))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(cityL)
                                        .add(city, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(country, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                        .add(countryL))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(countyL)
                                .add(county, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))))
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(customerNumberL)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(customerNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(titleL)
                                .add(academicTitleL))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(academicTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(firstnameL)
                                .add(lastnameL))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(firstname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(lastname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(streetL)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(street, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(zipCodeL)
                                .add(cityL))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(zipCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(city, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(countryL)
                                .add(countyL))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(country, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(county, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reinitI18N();
    }
    // </editor-fold>

    private void titleActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    }

    public String getCustomerNumber() {
        return customerNumber.getText();
    }

    public void setCustomerNumber(String customerNumber) {
        this.customerNumber.setText(customerNumber);
    }

    public SystemUnit getTitle() {
        return (SystemUnit) title.getSelectedItem();
    }

    public void setTitle(SystemUnit title) {
        this.title.setSelectedItem(title);
    }

    public SystemUnit getAcademicTitle() {
        return (SystemUnit) academicTitle.getSelectedItem();
    }

    public void setAcademicTitle(SystemUnit academicTitle) {
        this.academicTitle.setSelectedItem(academicTitle);
    }

    public String getFirstname() {
        return firstname.getText();
    }

    public void setFirstname(String firstname) {
        this.firstname.setText(firstname);
    }

    public String getLastname() {
        return lastname.getText();
    }

    public void setLastname(String lastname) {
        this.lastname.setText(lastname);
    }

    public String getStreet() {
        return street.getText();
    }

    public void setStreet(String street) {
        this.street.setText(street);
    }

    public String getZipCode() {
        return zipCode.getText();
    }

    public void setZipCode(String zipCode) {
        this.zipCode.setText(zipCode);
    }

    public String getCity() {
        return city.getText();
    }

    public void setCity(String city) {
        this.city.setText(city);
    }

    public SystemCountry getCountry() {
        return (SystemCountry) country.getSelectedItem();
    }

    public void setCountry(SystemCountry country) {
        this.country.setSelectedItem(country);
    }

    public SystemCounty getCounty() {
        return (SystemCounty) county.getSelectedItem();
    }

    public void setCounty(SystemCounty county) {
        this.county.setSelectedItem(county);
    }

    public void reinitI18N() {

        border.setTitle(WorkArea.getMessage(Constants.DATA));

        customerNumberL.setText(WorkArea.getMessage(Constants.CUSTOMER_NUMBER));
        titleL.setText(WorkArea.getMessage(Constants.TITLE));
        academicTitleL.setText(WorkArea.getMessage(Constants.ACADEMIC_TITLE));
        firstnameL.setText(WorkArea.getMessage(Constants.FIRSTNAME));
        lastnameL.setText(WorkArea.getMessage(Constants.LASTNAME));
        streetL.setText(WorkArea.getMessage(Constants.STREET));
        zipCodeL.setText(WorkArea.getMessage(Constants.ZIP_CODE));
        cityL.setText(WorkArea.getMessage(Constants.CITY));
        countryL.setText(WorkArea.getMessage(Constants.COUNTRY));
        countyL.setText(WorkArea.getMessage(Constants.COUNTY));
    }
}
